<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>已經初始化此互動式視窗。</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>以下一個提交取代目前提交 (向後巡覽之後)。</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>以上一個提交取代目前提交。</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>清除編輯器視窗的內容，保持記錄及執行內容不變。</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>命令 '{0}' 失敗: {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[命令名稱]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>首先選取包含資料指標的提交。接著選取視窗中所有文字。</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>以開頭文字相同的下一個提交取代目前提交 (向後巡覽之後)。</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>以開頭文字相同的上一個提交取代目前提交。</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>在互動式緩衝區中任一暫止輸入之前貼上選取項目，並加以執行。</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>在目前提交中，評估目前提交。</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>在上一個提交中，將上一個提交附加至目前提交。</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>在互動式緩衝區的結尾貼上選取項目，將插入號保留在輸入的結尾。</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>在目前提交的結尾，以下一個提交取代目前提交 (向後巡覽之後)。</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>在其他地方，將資料指標向下移動一行。</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>已有名為 '{0}' 的命令註冊。</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>如果目前提交似乎已完成，會加以評估。否則會插入新行。</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>清除目前提交。</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>顯示指定命令的說明，若未指定則顯示所有可用命令與索引鍵繫結。</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>Interactive 視窗中發生內部錯誤。  請重新啟動 Visual Studio。</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>鍵盤快速鍵:</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>類型為 '{0}' 的命令沒有命令名稱。</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>尚未初始化此互動式視窗。</value>
  </data>
  <data name="IsResetting" xml:space="preserve">
    <value>正在重設互動式視窗。</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>參數:</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>REPL 命令:</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>此方法不能在 UI 執行緒上呼叫 (以免停止回應)。</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>此方法只能在 UI 執行緒上呼叫。</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>將執行環境重設為初始狀態，但保留記錄。</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>重設為初始環境 (僅參考 mscorlib)，不要執行初始化指令碼。</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>插入新行。</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>未知的命令 '{0}'</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>在目前提交的結尾，以上一個提交取代目前提交。</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>在其他地方，將資料指標向上移動一行。</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>使用方式:</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>複製</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>從選取項目產生 RTF 格式表示法。</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>刪除左邊的字元</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>插入新行</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>貼上</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>剪下選取範圍</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>刪除文字</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>剪下行</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>刪除行</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>插入文字</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>指令碼指示詞:</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>將中繼資料參考加入指定的組件及其所有相依性，例如 #r "myLib.dll"。</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>載入指定的指示碼檔案並加以執行，例如 #load "myScript.csx"。</value>
  </data>
</root>