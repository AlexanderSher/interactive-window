<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>La finestra interattiva è già stata inizializzata.</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>Sostituisce l'invio corrente con uno successivo dopo che è stato eseguito uno spostamento all'indietro.</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>Sostituisce l'invio corrente con uno precedente.</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>Cancella il contenuto della finestra dell'editor, lasciando intatte la cronologia e il contesto di esecuzione.</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>Il comando '{0}' non è riuscito: {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[nome-comando]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>Se premuto una volta, seleziona l'invio che contiene il cursore. Se premuto la seconda volta, seleziona tutto i testo nella finestra.</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>Sostituisce l'invio corrente con uno successivo, a partire dallo stesso testo, dopo che è stato eseguito uno spostamento all'indietro.</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>Sostituisce l'invio corrente con uno precedente, a partire dallo stesso testo.</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>Incolla ed esegue la selezione prima di eventuale input in sospeso nel buffer interattivo.</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>Nell'invio corrente, valuta l'invio.</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>In un invio precedente, aggiunge l'invio precedente a quello corrente.</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>Incolla la selezione alla fine del buffer interattivo, lasciando il punto di inserimento alla fine dell'input.</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>Alla fine dell'invio corrente, sostituisce l'invio corrente con uno successivo dopo che è stato eseguito uno spostamento all'indietro.</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>Altrove, sposta il cursore alla riga successiva.</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>È stato già registrato un comando denominato '{0}'.</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>Valuta l'invio corrente se sembra completo; in caso contrario, inserisce una nuova riga.</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>Cancella l'invio corrente.</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>Visualizza la guida relativa al comando specificato oppure tutti i comandi e i tasti di scelta rapida disponibili se non viene specificato alcun comando.</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>Si è verificato un errore interno nella finestra interattiva. Riavviare Visual Studio.</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>Tasti di scelta rapida:</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>Il comando di tipo '{0}' non contiene nomi di comando.</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>La finestra interattiva non è stata ancora inizializzata.</value>
  </data>
  <data name="IsResetting" xml:space="preserve">
    <value>È in corso la reimpostazione della finestra interattiva.</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parametri:</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>Comandi REPL:</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>È possibile non chiamare questo metodo sul thread dell'interfaccia utente (per evitare blocchi).</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>È possibile chiamare questo metodo solo sul thread dell'interfaccia utente.</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>Ripristina lo stato iniziale dell'ambiente di esecuzione, mantenendo la cronologia.</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>Esegue il ripristino a un ambiente pulito (solo con riferimenti a mscorlib), senza eseguire lo script di inizializzazione.</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>Inserisce una nuova riga.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Comando '{0}' sconosciuto</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>Alla fine dell'invio corrente, sostituisce l'invio corrente con uno precedente.</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>Altrove, sposta il cursore alla riga precedente.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Utilizzo:</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>Copia</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>Generazione della rappresentazione Rich Text Format dalla selezione.</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>Elimina carattere a sinistra</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>Inserisci nuova riga</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>Incolla</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Taglia selezione</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Elimina testo</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>Taglia riga</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>Elimina riga</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>Inserisci testo</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>Direttive script:</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>Aggiunge un riferimento ai metadati all'assembly specificato e a tutte le relative dipendenze, ad esempio #r "LibPersonale.dll".</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>Carica il file di script specificato e lo esegue, ad esempio #load "ScriptPersonale.csx".</value>
  </data>
</root>