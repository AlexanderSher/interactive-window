<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>Das interaktive Fenster wurde bereits initialisiert.</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>Ersetzt die aktuelle Übermittlung durch eine nachfolgende Übermittlung (nach vorheriger Rückwärtsnavigation).</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>Ersetzt die aktuelle Übermittlung durch eine vorherige Übermittlung.</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>Löscht den Inhalt des Editor-Fensters. Verlauf und Ausführungskontext bleiben intakt.</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>Fehler beim Befehl "{0}": {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[Befehlsname]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>Beim ersten Drücken der Taste wird die Übermittlung ausgewählt, die den Cursor enthält. Beim zweiten Drücken der Taste wird der gesamte Text im Fenster ausgewählt.</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>Ersetzt die aktuelle Übermittlung durch eine nachfolgende Übermittlung mit dem gleichen Text (nach vorheriger Rückwärtsnavigation).</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>Ersetzt die aktuelle Übermittlung durch eine vorherige Übermittlung, die mit dem gleichen Text beginnt.</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>Fügt die Auswahl vor allen ausstehenden Eingaben im interaktiven Puffer ein und führt sie aus.</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>Wertet die aktuelle Übermittlung innerhalb der aktuellen Übermittlung aus.</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>Fügt innerhalb einer vorherigen Übermittlung die vorherige Übermittlung an die aktuelle Übermittlung an.</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>Fügt die Auswahl am Ende des interaktiven Puffers ein und belässt den Textcursor am Ende der Eingabe.</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>Ersetzt am Ende der aktuellen Übermittlung die aktuelle Übermittlung durch eine nachfolgende Übermittlung (nach vorheriger Rückwärtsnavigation).</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>Verschiebt andernfalls den Cursor eine Zeile nach unten.</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>Ein Befehl mit dem Namen '{0}' wurde bereits registriert.</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>Wertet die aktuelle Übermittlung aus, wenn diese abgeschlossen zu sein scheint. Fügt andernfalls eine neue Zeile ein.</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>Löscht die aktuelle Übermittlung.</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>Zeigt Hilfe zum angegebenen Befehl oder zu allen verfügbaren Befehlen und Tastenzuordnungen an, wenn kein Befehl angegeben wird.</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>Interner Fehler im interaktiven Fenster. Bitte starten Sie Visual Studio neu.</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>Tastaturkurzbefehle:</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>Der Befehl vom Typ '{0}' hat keine Befehlsnamen.</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>Das interaktive Fenster wurde noch nicht initialisiert.</value>
  </data>
  <data name="IsResetting" xml:space="preserve">
    <value>Das interaktive Fenster wird zurückgesetzt.</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parameter:</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>REPL-Befehle:</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>Diese Methode kann nicht für den Benutzeroberflächenthread aufgerufen werden (um Stabilitätsprobleme zu vermeiden).</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>Diese Methode kann nur für den Benutzeroberflächenthread aufgerufen werden.</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>Setzt die Ausführungsumgebung in den ursprünglichen Zustand zurück. Der Verlauf wird beibehalten.</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>Setzt auf eine saubere Umgebung zurück (nur Verweis auf "mscorlib") und führt das Initialisierungsskript nicht aus.</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>Fügt eine neue Zeile ein.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unbekannter Befehl "{0}".</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>Ersetzt am Ende der aktuellen Übermittlung die aktuelle Übermittlung durch eine vorherige Übermittlung.</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>Verschiebt andernfalls den Cursor eine Zeile nach oben.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Nutzung:</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>Kopieren</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>Eine Darstellung im Rich Text-Format wird aus der Auswahl generiert.</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>Zeichen links löschen</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>Neue Zeile einfügen</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>Einfügen</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Auswahl ausschneiden</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Text löschen</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>Zeile ausschneiden</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>Zeile löschen</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>Text einfügen</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>Skriptdirektiven:</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>Fügt der angegebenen Assembly und allen ihren Abhängigkeiten einen Metadatenverweis hinzu. Beispiel: #r "myLib.dll".</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>Lädt die angegebene Skriptdatei und führt sie aus. Beispiel: #load "myScript.csx".</value>
  </data>
</root>