<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>La ventana interactiva ya se inicializó.</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>Reemplace el envío actual por uno posterior (tras haber navegado hacia atrás).</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>Reemplace el envío actual por uno anterior.</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>Borra el contenido de la ventana del editor, pero deja intactos el historial y el contexto de ejecución.</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>Command '{0}' failed: {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[nombre-comando]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>Al presionar por primera vez, se selecciona el envío que contiene el cursor. Al presionar por segunda vez, se selecciona todo el texto de la ventana.</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>Reemplace el envío actual por uno posterior con el mismo texto inicial (tras haber navegado hacia atrás).</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>Reemplace el envío actual por uno posterior con el mismo texto inicial.</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>Pegue la selección y ejecútela antes de cualquier entrada pendiente en el búfer interactivo.</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>Evalúe el envío actual dentro del propio envío.</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>Dentro de un envío anterior, asocie dicho envío al actual.</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>Pegue la selección al final del búfer interactivo y deje un símbolo de intercalación al final de la entrada.</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>Al final del envío actual, reemplace el envío actual por uno posterior (tras haber navegado hacia atrás).</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>En otras ubicaciones, baje el cursor una línea.</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>Ya se registró un comando con el nombre '{0}'.</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>Si el envío actual parece estar completo, evalúelo. De lo contrario, inserte una nueva línea.</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>Borre el envío actual.</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>Muestra ayuda sobre el comando especificado o sobre todos los comandos y enlaces de teclado disponibles si no se especifica ninguno.</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>Error interno en la ventana interactiva. Reinicie Visual Studio.</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>Métodos abreviados de teclado:</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>El comando de tipo "{0}" no tiene nombres de comando.</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>La ventana interactiva aún no se inicializó.</value>
  </data>
  <data name="IsResetting" xml:space="preserve">
    <value>La ventana interactiva se está restableciendo.</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parámetros:</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>Comandos REPL:</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>Es posible que no se pueda llamar a este método en el subproceso de interfaz de usuario (para evitar cuelgues).</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>Este método solo se puede llamar en el subproceso de interfaz de usuario.</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>Restablecer el entorno de ejecución al estado inicial, conservar el historial.</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>Restablecer a un entorno limpio (referencia exclusiva a mscorlib), no ejecutar el script de inicialización.</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>Inserte una nueva línea.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Comando '{0}' desconocido.</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>Al final del envío actual, reemplace este envío por uno anterior.</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>En otras ubicaciones, suba el cursor una línea.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Uso:</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>Copiar</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>Generando una representación con formato de texto enriquecido a partir de la selección.</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>Eliminar carácter a la izquierda</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>Insertar nueva línea</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>Pegar</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Cortar selección</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Eliminar texto</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>Cortar línea</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>Eliminar línea</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>Insertar texto</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>Directivas de script:</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>Agregue una referencia de metadatos al ensamblado especificado y todas sus dependencias, p. ej. #r "myLib.dll".</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>Cargue el archivo de script especificado y ejecútelo, p. ej. #load "myScript.csx".</value>
  </data>
</root>