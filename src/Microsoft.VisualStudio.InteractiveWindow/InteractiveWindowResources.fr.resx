<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>La fenêtre interactive a déjà été initialisée.</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>Remplacer la soumission actuelle par une soumission ultérieure (après avoir navigué vers l'arrière).</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>Remplacer la soumission actuelle par une soumission antérieure.</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>Efface le contenu de la fenêtre de l'éditeur, en laissant l'historique et le contexte d'exécution intacts.</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>Échec de la commande '{0}' : {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[nom-commande]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>Premier appui, sélectionner la soumission contenant le curseur. Deuxième appui, sélectionner tout le texte de la fenêtre.</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>Remplacer la soumission actuelle par une soumission ultérieure commençant par le même texte (après avoir navigué vers l'arrière).</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>Remplacer la soumission actuelle par une soumission antérieure commençant par le même texte.</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>Coller et exécuter la sélection avant les entrées en attente dans la mémoire tampon interactive.</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>Dans la soumission actuelle, évaluer la soumission actuelle.</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>Dans une soumission antérieure, ajouter la soumission antérieure à la soumission actuelle.</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>Coller la sélection à la fin de la mémoire tampon interactive, laisser le signe insertion à la fin de l'entrée.</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>À la fin de la soumission actuelle, remplacer la soumission actuelle par une soumission ultérieure (après avoir navigué vers l'arrière).</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>Ailleurs, déplacer le curseur d'une ligne vers le bas.</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>Une commande avec le nom '{0}' a déjà été inscrite.</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>Si la soumission actuelle semble être terminée, l'évaluer. Sinon, insérer une nouvelle ligne.</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>Effacer la soumission actuelle.</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>Afficher de l'aide sur la commande spécifiée ou sur toutes les commandes disponibles et les combinaisons de touches si rien n'est spécifié.</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>Une erreur interne s'est produite dans la fenêtre Interactive. Redémarrez Visual Studio.</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>Raccourcis clavier :</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>La commande de type '{0}' n'a aucun nom de commande.</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>La fenêtre interactive n'est pas encore initialisée.</value>
  </data>
  <data name="IsResetting" xml:space="preserve">
    <value>La fenêtre interactive est en cours de réinitialisation.</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Paramètres :</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>Commandes REPL :</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>Cette méthode ne peut pas être appelée sur le thread d'interface utilisateur (pour éviter tout blocage).</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>Cette méthode peut uniquement être appelée sur le thread d'interface utilisateur.</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>Rétablir l'état initial de l'environnement d'exécution, conserver l'historique.</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>Rétablir un environnement propre (seul mscorlib est référencé), ne pas exécuter de script d'initialisation.</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>Insérer une nouvelle ligne.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Commande inconnue '{0}'</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>À la fin de la soumission actuelle, remplacer la soumission actuelle par une soumission antérieure.</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>Ailleurs, déplacer le curseur d'une ligne vers le haut.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Utilisation :</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>Copier</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>Génération d'une représentation RTF (Rich Text Format) de la sélection.</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>Supprimer le caractère à gauche</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>Insérer une nouvelle ligne</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>Coller</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Couper la sélection</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Supprimer le texte</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>Couper la ligne</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>Supprimer la ligne</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>Insérer du texte</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>Directives de script :</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>Permet d'ajouter une référence de métadonnées à l'assembly spécifié et toutes ses dépendances. Exemple : #r "myLib.dll".</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>Permet de charger le fichier de script spécifié et de l'exécuter. Exemple : #load "myScript.csx".</value>
  </data>
</root>