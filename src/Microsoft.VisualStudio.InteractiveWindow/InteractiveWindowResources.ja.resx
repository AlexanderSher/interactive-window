<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInitialized" xml:space="preserve">
    <value>対話型ウィンドウは既に初期化されています。</value>
  </data>
  <data name="AltDownArrowHelp" xml:space="preserve">
    <value>現在の送信を次の送信に置き換えます (前に戻っている場合)。</value>
  </data>
  <data name="AltUpArrowHelp" xml:space="preserve">
    <value>現在の送信を前の送信に置き換えます。</value>
  </data>
  <data name="ClearScreenCommandDescription" xml:space="preserve">
    <value>編集ウィンドウの内容をクリアし、履歴と実行コンテキストはそのまま保持します。</value>
  </data>
  <data name="CommandFailed" xml:space="preserve">
    <value>コマンド '{0}' に失敗しました: {1}</value>
  </data>
  <data name="CommandNamePlaceholder" xml:space="preserve">
    <value>[コマンド名]</value>
  </data>
  <data name="CtrlAHelp" xml:space="preserve">
    <value>最初に押すと、カーソルの置かれた送信が選択されます。もう一度押すと、ウィンドウ内のすべてのテキストが選択されます。</value>
  </data>
  <data name="CtrlAltDownArrowHelp" xml:space="preserve">
    <value>現在の送信を、同じテキストで始まる次の送信に置き換えます (前に戻っている場合)。</value>
  </data>
  <data name="CtrlAltUpArrowHelp" xml:space="preserve">
    <value>現在の送信を、同じテキストで始まる前の送信に置き換えます。</value>
  </data>
  <data name="CtrlECtrlEnterHelp" xml:space="preserve">
    <value>対話型バッファー内の保留中の入力の前に、選択内容を貼り付けて実行します。</value>
  </data>
  <data name="CtrlEnterHelp1" xml:space="preserve">
    <value>現在の送信内で、現在の送信を評価します。</value>
  </data>
  <data name="CtrlEnterHelp2" xml:space="preserve">
    <value>前の送信内で、前の送信を現在の送信に追加します。</value>
  </data>
  <data name="CtrlKCtrlEnterHelp" xml:space="preserve">
    <value>対話型バッファーの最後に選択内容を貼り付け、キャレットを入力の末尾に付けます。</value>
  </data>
  <data name="DownArrowHelp1" xml:space="preserve">
    <value>現在の送信の最後で、現在の送信を次の送信に置き換えます (前に戻っている場合)。</value>
  </data>
  <data name="DownArrowHelp2" xml:space="preserve">
    <value>他の場所では、カーソルを 1 行下に移動します。</value>
  </data>
  <data name="DuplicateCommand" xml:space="preserve">
    <value>'{0}' という名前のコマンドは既に登録されています。</value>
  </data>
  <data name="EnterHelp" xml:space="preserve">
    <value>現在の送信が完了している場合は、評価します。完了していない場合には、新しい行を挿入します。</value>
  </data>
  <data name="EscapeHelp" xml:space="preserve">
    <value>現在の送信をクリアします。</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>指定のコマンド、または指定していない場合には利用可能なすべてのコマンドとキー バイデンィングに関する、ヘルプを表示します。</value>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>対話型のウィンドウで内部エラーが発生しました。Visual Studio を再起動してください。</value>
  </data>
  <data name="KeyboardShortcuts" xml:space="preserve">
    <value>キーボード ショートカット:</value>
  </data>
  <data name="MissingCommandName" xml:space="preserve">
    <value>コマンドの型 '{0}' にコマンド名がありません。</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>対話型のウィンドウはまだ初期化されていません。</value>
  </data>
  <data name="IsResetting" xml:space="preserve">
    <value>対話式ウィンドウをリセットしています。</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>パラメーター:</value>
  </data>
  <data name="ReplCommands" xml:space="preserve">
    <value>REPL コマンド:</value>
  </data>
  <data name="RequireNonUIThread" xml:space="preserve">
    <value>このメソッドは UI スレッドで呼び出されない場合があります (ハング回避のため)。</value>
  </data>
  <data name="RequireUIThread" xml:space="preserve">
    <value>このメソッドは UI スレッド上でのみ呼び出される場合があります。</value>
  </data>
  <data name="ResetCommandDescription" xml:space="preserve">
    <value>実行環境を初期状態にリセットし、履歴を保持します。</value>
  </data>
  <data name="ResetCommandParametersDescription" xml:space="preserve">
    <value>クリーンな環境 (mscorlib のみを参照) にリセットし、初期化スクリプトは実行しません。</value>
  </data>
  <data name="ShiftEnterHelp" xml:space="preserve">
    <value>新しい行を挿入します。</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>'{0}' は不明なコマンドです</value>
  </data>
  <data name="UpArrowHelp1" xml:space="preserve">
    <value>現在の送信の最後で、現在の送信を前の送信に置き換えます。</value>
  </data>
  <data name="UpArrowHelp2" xml:space="preserve">
    <value>他の場所では、カーソルを 1 行上に移動します。</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>使用法:</value>
  </data>
  <data name="WaitTitle" xml:space="preserve">
    <value>コピー</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>選択内容に基づいてリッチ テキスト形式表現を生成しています。</value>
  </data>
  <data name="Backspace" xml:space="preserve">
    <value>左の文字を削除</value>
  </data>
  <data name="BreakLine" xml:space="preserve">
    <value>改行の挿入</value>
  </data>
  <data name="Paste" xml:space="preserve">
    <value>貼り付け</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>選択部分を削除</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>テキストの削除</value>
  </data>
  <data name="CutLine" xml:space="preserve">
    <value>行の切り取り</value>
  </data>
  <data name="DeleteLine" xml:space="preserve">
    <value>行の削除</value>
  </data>
  <data name="TypeChar" xml:space="preserve">
    <value>テキストの挿入</value>
  </data>
  <data name="CSVBScriptDirectives" xml:space="preserve">
    <value>スクリプト ディレクティブ:</value>
  </data>
  <data name="RefHelp" xml:space="preserve">
    <value>指定されたアセンブリとそのすべての依存関係へのメタデータ参照を追加します (例: #r "myLib.dll")。</value>
  </data>
  <data name="LoadHelp" xml:space="preserve">
    <value>指定されたスクリプト ファイルを読み込んで実行します (例: #load "myScript.csx")。</value>
  </data>
</root>